Add DPU support to GPGPU-Sim

1) Make sure that some benchmakrs run on the current version to use as baseline.
    In particular from ISPASS: CP, DG, LPS, RAY, WP

    Seems than all of the benchmarks pass in the rodinia-2 benchmark

2) What files/ functions should be changed:
    * Configuration files/ option parsers:
        * gpu-sim.cc: add option parser for various things like:
            * gpgpu_operand_collector_num_units_dp                              done  
            * gpgpu_operand_collector_num_in_ports_dp                           done
            * gpgpu_operand_collector_num_out_ports_dp                          done
            * gpgpu_num_dp_units                                                done
        * configs/*/gpgpusim.config
            * Add the proper configuration according to the SP and SFU          done

    * shader.cc:shader_core_ctx() (constructor)                                 done
        * line 216: add collector units for the dpus                            done
        * line 266: add to the total number of function units the dpus          done
        * lines 272-278: for each dpu, add it to the m_fu, add to               done 
        m_dispatch_port and m_issue_port

    * shader.cc:scheduler::cycle()
        * this where the scheduler desides to which function units to issue the done
        instructions
        * Here, for DP instructions we should prioritize the DPUs               done
        * I need a way to tell if the instruction is DP (looking at the opcode) done
        * This logic should be added in this fucntion, somewhere in             done
        lines 878-920
    
    * shader.cc:swl_scheduler::swl_scheduler() (constructor)                    done
    to all scheduler constructors that take the register_set *sfu_out,          done
    add the DPUs                                                

    * inst.op_pipe should have a category for the DPUs (DP__OP)                 done

    * shader.{cc, h}: add constructor for the dpu                               done
        * similar to sfu::sfu in line 1506                                      done
        * also imlpement the issue function                                     done
        * the active_lanes_in_pipeline()                                        done

    * shader.h: Add the necessary member variables, similarly to SP and SFU     done

    * Statistics:
        * power_stat.{cc, h}:                                                   skipped
            * Similar to the SPs and SFUs.                                      skipped

    * Power:                                                                    
        * At first, I can disable the power estimation and focus on the         skipped
        functional and performance simulation                                   skipped
        * power_interface.{cc, h}:                                              skipped
            * according to lines 90-100, for DPUs                               skipped
        * gpuwattch/gpgpu_sim_wrapper.h lines 84-85                             skipped
        * gpuwattch/core.h: line 489 get_coefficient_sfu_accesses()             skipped
        * gpuwattch/logic.cc: lines 697-698                                     skipped
        * etc.. based on the sfu, dp                                            skipped

3) Things to check for and correct:
    * N_PIPELINE_STAGES                                                         done
    * pipe_widths                                                               done
    * n_num_function_units                                                      done
    * gpgpu_num_sp_units                                                        done
    * sp_unit (class)                                                           done
    * gpgpu_operand_collector_num_units_sp                                      done
    * gpgpu_operand_collector_num_in_ports_sp                                   done
    * gpgpu_operand_collector_num_out_ports_sp                                  done
    * max_sp_latency                                                            done
    * m_num_sp_accesses                                                         done
    * m_num_sp_commited                                                         done
    * m_active_sp_lanes                                                         done
    * SP_CUS                                                                    done
    * ID_OC_SP                                                                  done
    * OC_EX_SP                                                                  done
    * SP__OP                                                                    done
    * incsp_stat                                                                done
    * incspactivelanes_stat                                                     done
    * special_operations_t                                                      done
    * lrr_scheduler (add parameter)                                             done
    * two_level_active_scheduler (add parameter)                                done
    * gto_scheduler (add parameter)                                             done
    * swl_scheduler (add parameter)                                             done
    * scheduler_unit (add parameter)                                            done
    * operation_pipeline, operation_pipeline_t                                  done
    * F64_TYPE, where it comes from?                                            done
    * m_sp_out                                                                  done
    * m_num_FPdecoded_insn                                                      done
    * get_total_fp_inst
    * get_sp_commited_inst
    * get_sp_accessess
    * avg_dp_active_lanes

4) Assumptions that might need to be revised
    * max_dp_latency == 64 (2* max_sp_latency)
    * Should I add an OP like SFU_OP? I don't thnik so, but have a look
    * special_operations_t, FP__OP
    * Or a uarch operand type?
    * I added an DP__OP enum operation_pipeline{_t}
    * I added oprnd_type FP64_OP in the ptx_instruction::set_fp_or_int_archop
    * need to debug the deadlock                                                done
    * It is triggered from gpu-sim.cc:1590 because 
    gpu_sim_insn == last_gpu_sim_insn.
    * Look where the gpu_sim_insn is updated
        * It is updated in shader.cc: line 1333
        * function warp_inst_complete
            1. Where is this function called from?
                * shader_core_ctx::writeback()
            2. it is updated by active_count() 

5) Useful notes:
    * a warp_inst_t derives from inst_t
    * in the inst_t there are the members:
        * op_type op (abstract_hardware_model.h:line 75)
            * If I add here an ALU_DP_OP?
        * types_of_operands oprnd_type
            * this one is INT or FP 
        * special_ops sp_op
            * this one could be but not very sure
        * operation_pipeline op_pipe
            * this one seems the best
    * I can easily categorize the sp_op or the oprnd_type (but not the op_type)
    * In the shader.cc:scheduler cycle() I could do:
        * If it is an ALU op, and the operand type is FP64, then call the DP units.